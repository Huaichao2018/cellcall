library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
?head
rm(list = ls())
library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
# 更新description内容
use_package(package = "graphics", type = "Imports", min_version = TRUE)
use_package(package = "stringr", type = "Imports", min_version = TRUE)
use_package(package = "methods", type = "Imports", min_version = TRUE)
use_package(package = "dplyr", type = "Imports", min_version = TRUE)
use_package(package = "psych", type = "Imports", min_version = TRUE)
use_package(package = "clusterProfiler", type = "Imports", min_version = TRUE)
use_package(package = "stats", type = "Imports", min_version = TRUE)
use_package(package = "magrittr", type = "Imports", min_version = TRUE)
use_package(package = "utils", type = "Imports", min_version = TRUE)
f.tmp <- system.file("extdata", "example_Data.Rdata", package="cellwave")
load(f.tmp)
mt <- CreateNichConObject(data=in.content, min.feature = 3,
names.field = 2,
names.delim = "_",
source = "TPM", # fullLength, UMI, TPM
scale.factor = 10^6,
Org = "Hsapiens",
project = "Microenvironment")
mt <- TransCommuProfile(mt,
pValueCor = 0.05,
CorValue = 0.1,
topTargetCor=1,
p.adjust = 0.05,
use.type="median", # "mean"(if( quantile,0.75==0  ) remove); "median" is for deep sequence like bulk seq
probs = 0.75,  # (if( quantile,0.75==0  ) remove) is a param for use.type="mean"
method="weighted")  # "weighted", "max", "mean"
?data.frame
?modifyList
mt <- CreateNichConObject(data=in.content, min.feature = 3,
names.field = 2,
names.delim = "_",
source = "TPM", # fullLength, UMI, TPM
scale.factor = 10^6,
Org = "Homo sapiens",
project = "Microenvironment")
mt <- TransCommuProfile(mt,
pValueCor = 0.05,
CorValue = 0.1,
topTargetCor=1,
p.adjust = 0.05,
use.type="median", # "mean"(if( quantile,0.75==0  ) remove); "median" is for deep sequence like bulk seq
probs = 0.75,  # (if( quantile,0.75==0  ) remove) is a param for use.type="mean"
method="weighted")  # "weighted", "max", "mean"
mt <- CreateNichConObject(data=in.content, min.feature = 3,
names.field = 2,
names.delim = "_",
source = "TPM", # fullLength, UMI, TPM
scale.factor = 10^6,
Org = "Homo sapiens",
project = "Microenvironment")
mt <- TransCommuProfile(mt,
pValueCor = 0.05,
CorValue = 0.1,
topTargetCor=1,
p.adjust = 0.05,
use.type="median", # "mean"(if( quantile,0.75==0  ) remove); "median" is for deep sequence like bulk seq
probs = 0.75,  # (if( quantile,0.75==0  ) remove) is a param for use.type="mean"
method="weighted",
Org = 'Homo sapiens')  # "weighted", "max", "mean"
rm(list = ls())
library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
# 更新description内容
use_package(package = "graphics", type = "Imports", min_version = TRUE)
use_package(package = "stringr", type = "Imports", min_version = TRUE)
use_package(package = "methods", type = "Imports", min_version = TRUE)
use_package(package = "dplyr", type = "Imports", min_version = TRUE)
use_package(package = "psych", type = "Imports", min_version = TRUE)
use_package(package = "clusterProfiler", type = "Imports", min_version = TRUE)
use_package(package = "stats", type = "Imports", min_version = TRUE)
use_package(package = "magrittr", type = "Imports", min_version = TRUE)
use_package(package = "utils", type = "Imports", min_version = TRUE)
library(cellwave)
f.tmp <- system.file("extdata", "example_Data.Rdata", package="cellwave")
load(f.tmp)
mt <- CreateNichConObject(data=in.content, min.feature = 3,
names.field = 2,
names.delim = "_",
source = "TPM", # fullLength, UMI, TPM
scale.factor = 10^6,
Org = "Homo sapiens",
project = "Microenvironment")
mt <- TransCommuProfile(mt,
pValueCor = 0.05,
CorValue = 0.1,
topTargetCor=1,
p.adjust = 0.05,
use.type="median", # "mean"(if( quantile,0.75==0  ) remove); "median" is for deep sequence like bulk seq
probs = 0.75,  # (if( quantile,0.75==0  ) remove) is a param for use.type="mean"
method="weighted",
Org = 'Homo sapiens')  # "weighted", "max", "mean"
in.content <- read.table(file = "./data_paper/Zhaolaoshi_data/for_liutianyuan/for_cell_linker/normal_OA.txt", header = T, sep = "\t", stringsAsFactors = F, check.names = F)
in.content <- read.table(file = "d:/InterCell//data_paper/Zhaolaoshi_data/for_liutianyuan/for_cell_linker/normal_OA.txt", header = T, sep = "\t", stringsAsFactors = F, check.names = F)
dim(in.content)
unique(str_split(colnames(in.content), '_', simplify = T)[,2])
library(stringr)
unique(str_split(colnames(in.content), '_', simplify = T)[,2])
in.content <- in.content[,(str_split(colnames(in.content), '_', simplify = T)[,2] %in% c("ST", "SSC", "SPGing", "SPGed"))]
in.content[1:4,1:4]
dim(in.content)
table(str_split(colnames(in.content), '_', simplify = T)[,2])
save(in.content, file = "D:/Create_R/cellwave/inst/extdata/example_Data.Rdata")
rm(list = ls())
library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
use_package(package = "graphics", type = "Imports", min_version = TRUE)
use_package(package = "stringr", type = "Imports", min_version = TRUE)
use_package(package = "methods", type = "Imports", min_version = TRUE)
use_package(package = "dplyr", type = "Imports", min_version = TRUE)
use_package(package = "psych", type = "Imports", min_version = TRUE)
use_package(package = "clusterProfiler", type = "Imports", min_version = TRUE)
use_package(package = "stats", type = "Imports", min_version = TRUE)
use_package(package = "magrittr", type = "Imports", min_version = TRUE)
use_package(package = "utils", type = "Imports", min_version = TRUE)
f.tmp <- system.file("extdata", "example_Data.Rdata", package="cellwave")
load(f.tmp)
f.tmp[1:4, 1:4]
dim(f.tmp)
class(f.tmp)
f.tmp
load(f.tmp)
in.content[1:4, 1:4]
TABLE(str_split(colnames(in.content), "_", simplify = T)[,2])
table(str_split(colnames(in.content), "_", simplify = T)[,2])
rm(list = ls())
library(devtools)
library(roxygen2)
use_description() # 生成description，如果description被误删
author.description = list(
`Authors@R` = 'person("Tianyuan", "Liu", email = "lty@helloworld.org.cn", role = c("aut", "cre"))',
License = "Artistic-2.0",
Language =  "English",
Title = "SingleCellSignalR: inference of intercellular networks from single-cell transcriptomics",
Description = "inference of intercellular networks from single-cell transcriptomics")
use_description(fields = author.description, check_name = TRUE, roxygen = TRUE)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
use_package(package = "graphics", type = "Imports", min_version = TRUE)
use_package(package = "stringr", type = "Imports", min_version = TRUE)
use_package(package = "methods", type = "Imports", min_version = TRUE)
use_package(package = "dplyr", type = "Imports", min_version = TRUE)
use_package(package = "psych", type = "Imports", min_version = TRUE)
use_package(package = "clusterProfiler", type = "Imports", min_version = TRUE)
use_package(package = "stats", type = "Imports", min_version = TRUE)
use_package(package = "magrittr", type = "Imports", min_version = TRUE)
use_package(package = "utils", type = "Imports", min_version = TRUE)
f.tmp <- system.file("extdata", "example_Data.Rdata", package="cellwave")
load(f.tmp)
in.content[1:4, 1:4]
table(str_split(colnames(in.content), "_", simplify = T)[,2])
mt <- CreateNichConObject(data=in.content, min.feature = 3,
names.field = 2,
names.delim = "_",
source = "TPM", # fullLength, UMI, TPM
scale.factor = 10^6,
Org = "Homo sapiens",
project = "Microenvironment")
mt <- CreateNichConObject(data=in.content, min.feature = 3,
names.field = 2,
names.delim = "_",
source = "TPM", # fullLength, UMI, TPM
scale.factor = 10^6,
Org = "Homo sapiens",
project = "Microenvironment")
library(cellwave)
f.tmp <- system.file("extdata", "example_Data.Rdata", package="cellwave")
load(f.tmp)
in.content[1:4, 1:4]
table(str_split(colnames(in.content), "_", simplify = T)[,2])
mt <- CreateNichConObject(data=in.content, min.feature = 3,
names.field = 2,
names.delim = "_",
source = "TPM", # fullLength, UMI, TPM
scale.factor = 10^6,
Org = "Homo sapiens",
project = "Microenvironment")
head(mt@meta.data)
table(mt@meta.data$celltype)
mt <- TransCommuProfile(mt,
pValueCor = 0.05,
CorValue = 0.1,
topTargetCor=1,
p.adjust = 0.05,
use.type="median", # "mean"(if( quantile,0.75==0  ) remove); "median" is for deep sequence like bulk seq
probs = 0.75,  # (if( quantile,0.75==0  ) remove) is a param for use.type="mean"
method="weighted",
Org = 'Homo sapiens')  # "weighted", "max", "mean"
library(circlize)
?circos.trackPlotRegion
?circos.link
?circos.par
?circos.trackPlotRegion
?CreateNichConObject
?pushViewport
?unit
?plot.new
?par
?gridOMI
?circos.clear
?circos.par
?data.frame
?paste
?factor
?unlist
?circos.initialize
?circos.trackPlotRegion
?get.cell.meta.data
?highlight.sector
?dplyr::filter
?colorRamp2
?circos.link
?upViewport
?grid::upViewport
?Legend
?packLegend
?draw
ComplexHeatmap::draw()
?ComplexHeatmap::draw()
?ComplexHeatmap::packLegend()
?ComplexHeatmap::Legend()
?colorRamp2
?unit
?colorRamp2\
?colorRamp2
rm(list = ls())
library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
use_package(package = "gridBase", type = "Imports", min_version = TRUE)
# 更新description内容
use_package(package = "graphics", type = "Imports", min_version = TRUE)
use_package(package = "stringr", type = "Imports", min_version = TRUE)
use_package(package = "methods", type = "Imports", min_version = TRUE)
use_package(package = "dplyr", type = "Imports", min_version = TRUE)
use_package(package = "psych", type = "Imports", min_version = TRUE)
use_package(package = "clusterProfiler", type = "Imports", min_version = TRUE)
use_package(package = "stats", type = "Imports", min_version = TRUE)
use_package(package = "magrittr", type = "Imports", min_version = TRUE)
use_package(package = "utils", type = "Imports", min_version = TRUE)
use_package(package = "circlize", type = "Imports", min_version = TRUE)
use_package(package = "gridBase", type = "Imports", min_version = TRUE)
use_package(package = "grid", type = "Imports", min_version = TRUE)
use_package(package = "ComplexHeatmap", type = "Imports", min_version = TRUE)
rm(list = ls())
library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
# 更新description内容
use_package(package = "graphics", type = "Imports", min_version = TRUE)
use_package(package = "stringr", type = "Imports", min_version = TRUE)
use_package(package = "methods", type = "Imports", min_version = TRUE)
use_package(package = "dplyr", type = "Imports", min_version = TRUE)
use_package(package = "psych", type = "Imports", min_version = TRUE)
use_package(package = "clusterProfiler", type = "Imports", min_version = TRUE)
use_package(package = "stats", type = "Imports", min_version = TRUE)
use_package(package = "magrittr", type = "Imports", min_version = TRUE)
use_package(package = "utils", type = "Imports", min_version = TRUE)
use_package(package = "circlize", type = "Imports", min_version = TRUE)
use_package(package = "gridBase", type = "Imports", min_version = TRUE)
use_package(package = "grid", type = "Imports", min_version = TRUE)
use_package(package = "ComplexHeatmap", type = "Imports", min_version = TRUE)
library(cellwave)
f.tmp <- system.file("extdata", "example_Data.Rdata", package="cellwave")
load(f.tmp)
in.content[1:4, 1:4]
table(str_split(colnames(in.content), "_", simplify = T)[,2])
mt <- CreateNichConObject(data=in.content, min.feature = 3,
names.field = 2,
names.delim = "_",
source = "TPM", # fullLength, UMI, TPM
scale.factor = 10^6,
Org = "Homo sapiens",
project = "Microenvironment")
mt <- TransCommuProfile(mt,
pValueCor = 0.05,
CorValue = 0.1,
topTargetCor=1,
p.adjust = 0.05,
use.type="median",
probs = 0.75,
method="weighted",
Org = 'Homo sapiens')
library(ggplot2)
cell_color <- data.frame(color=c('#e31a1c','#1f78b4',
'#e78ac3','#ff7f00'), stringsAsFactors = FALSE)
rownames(cell_color) <- c("SSC", "SPGing", "SPGed", "ST")
ViewInterCircos(object = mt, font = 2, cellColor = cell_color, lrColor = c("#F16B6F", "#84B1ED"),arr.type = "big.arrow",arr.length = 0.04,
trackhight1 = 0.05, slot="",linkcolor.from.sender = TRUE, linkcolor = NULL, gap.degree = 2,order.vector=c('ST', "SSC", "SPGing", "SPGed"),
trackhight2 = 0.032, track.margin2 = c(0.01,0.12), DIY = TRUE)
library(cellwave)
cell_color <- data.frame(color=c('#e31a1c','#1f78b4',
'#e78ac3','#ff7f00'), stringsAsFactors = FALSE)
rownames(cell_color) <- c("SSC", "SPGing", "SPGed", "ST")
ViewInterCircos(object = mt, font = 2, cellColor = cell_color, lrColor = c("#F16B6F", "#84B1ED"),arr.type = "big.arrow",arr.length = 0.04,
trackhight1 = 0.05, slot="",linkcolor.from.sender = TRUE, linkcolor = NULL, gap.degree = 2,order.vector=c('ST', "SSC", "SPGing", "SPGed"),
trackhight2 = 0.032, track.margin2 = c(0.01,0.12), DIY = TRUE)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
library(cellwave)
cell_color <- data.frame(color=c('#e31a1c','#1f78b4',
'#e78ac3','#ff7f00'), stringsAsFactors = FALSE)
rownames(cell_color) <- c("SSC", "SPGing", "SPGed", "ST")
ViewInterCircos(object = mt, font = 2, cellColor = cell_color, lrColor = c("#F16B6F", "#84B1ED"),arr.type = "big.arrow",arr.length = 0.04,
trackhight1 = 0.05, slot="",linkcolor.from.sender = TRUE, linkcolor = NULL, gap.degree = 2,order.vector=c('ST', "SSC", "SPGing", "SPGed"),
trackhight2 = 0.032, track.margin2 = c(0.01,0.12), DIY = TRUE)
?viewport
library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
cell_color <- data.frame(color=c('#e31a1c','#1f78b4',
'#e78ac3','#ff7f00'), stringsAsFactors = FALSE)
rownames(cell_color) <- c("SSC", "SPGing", "SPGed", "ST")
ViewInterCircos(object = mt, font = 2, cellColor = cell_color, lrColor = c("#F16B6F", "#84B1ED"),arr.type = "big.arrow",arr.length = 0.04,
trackhight1 = 0.05, slot="",linkcolor.from.sender = TRUE, linkcolor = NULL, gap.degree = 2,order.vector=c('ST', "SSC", "SPGing", "SPGed"),
trackhight2 = 0.032, track.margin2 = c(0.01,0.12), DIY = TRUE)
grid::pushViewport()
grid::pushViewport
?pushViewport
library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
cell_color <- data.frame(color=c('#e31a1c','#1f78b4',
'#e78ac3','#ff7f00'), stringsAsFactors = FALSE)
rownames(cell_color) <- c("SSC", "SPGing", "SPGed", "ST")
ViewInterCircos(object = mt, font = 2, cellColor = cell_color, lrColor = c("#F16B6F", "#84B1ED"),arr.type = "big.arrow",arr.length = 0.04,
trackhight1 = 0.05, slot="",linkcolor.from.sender = TRUE, linkcolor = NULL, gap.degree = 2,order.vector=c('ST', "SSC", "SPGing", "SPGed"),
trackhight2 = 0.032, track.margin2 = c(0.01,0.12), DIY = TRUE)
ViewInterCircos(object = mt, font = 2, cellColor = cell_color, lrColor = c("#F16B6F", "#84B1ED"),
arr.type = "big.arrow",arr.length = 0.04,
trackhight1 = 0.05, slot="expr_l_r_log2_scale",linkcolor.from.sender = TRUE,
linkcolor = NULL, gap.degree = 2,order.vector=c('ST', "SSC", "SPGing", "SPGed"),
trackhight2 = 0.032, track.margin2 = c(0.01,0.12), DIY = TRUE)
dim(mt@data$expr_l_r_log2_scale)
head(mt@data$expr_l_r_log2_scale)
ViewInterCircos(object = mt, font = 2, cellColor = cell_color, lrColor = c("#F16B6F", "#84B1ED"),
arr.type = "big.arrow",arr.length = 0.04,
trackhight1 = 0.05, slot="expr_l_r_log2_scale",linkcolor.from.sender = TRUE,
linkcolor = NULL, gap.degree = 2,order.vector=c('ST', "SSC", "SPGing", "SPGed"),
trackhight2 = 0.032, track.margin2 = c(0.01,0.12), DIY = FALSE)
ViewInterCircos(object = mt@data$expr_l_r_log2_scale, font = 2, cellColor = cell_color, lrColor = c("#F16B6F", "#84B1ED"),
arr.type = "big.arrow",arr.length = 0.04,
trackhight1 = 0.05, slot="expr_l_r_log2_scale",linkcolor.from.sender = TRUE,
linkcolor = NULL, gap.degree = 2,order.vector=c('ST', "SSC", "SPGing", "SPGed"),
trackhight2 = 0.032, track.margin2 = c(0.01,0.12), DIY = T)
library(cellwave)
cell_color <- data.frame(color=c('#e31a1c','#1f78b4',
'#e78ac3','#ff7f00'), stringsAsFactors = FALSE)
rownames(cell_color) <- c("SSC", "SPGing", "SPGed", "ST")
ViewInterCircos(object = mt, font = 2, cellColor = cell_color, lrColor = c("#F16B6F", "#84B1ED"),
arr.type = "big.arrow",arr.length = 0.04,
trackhight1 = 0.05, slot="expr_l_r_log2_scale",linkcolor.from.sender = TRUE,
linkcolor = NULL, gap.degree = 2,order.vector=c('ST', "SSC", "SPGing", "SPGed"),
trackhight2 = 0.032, track.margin2 = c(0.01,0.12), DIY = FALSE)
ViewInterCircos(object = mt@data$expr_l_r_log2_scale, font = 2, cellColor = cell_color, lrColor = c("#F16B6F", "#84B1ED"),
arr.type = "big.arrow",arr.length = 0.04,
trackhight1 = 0.05, slot="expr_l_r_log2_scale",linkcolor.from.sender = TRUE,
linkcolor = NULL, gap.degree = 2,order.vector=c('ST', "SSC", "SPGing", "SPGed"),
trackhight2 = 0.032, track.margin2 = c(0.01,0.12), DIY = F)
ViewInterCircos(object = mt@data$expr_l_r_log2_scale, font = 2, cellColor = cell_color, lrColor = c("#F16B6F", "#84B1ED"),
arr.type = "big.arrow",arr.length = 0.04,
trackhight1 = 0.05, slot="expr_l_r_log2_scale",linkcolor.from.sender = TRUE,
linkcolor = NULL, gap.degree = 2,order.vector=c('ST', "SSC", "SPGing", "SPGed"),
trackhight2 = 0.032, track.margin2 = c(0.01,0.12), DIY = F)
ViewInterCircos(object = mt@data$expr_l_r_log2_scale, font = 2, cellColor = cell_color,
lrColor = c("#F16B6F", "#84B1ED"),
arr.type = "big.arrow",arr.length = 0.04,
trackhight1 = 0.05, slot="expr_l_r_log2_scale",linkcolor.from.sender = TRUE,
linkcolor = NULL, gap.degree = 2,order.vector=c('ST', "SSC", "SPGing", "SPGed"),
trackhight2 = 0.032, track.margin2 = c(0.01,0.12), DIY = T)
?gpar
library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
ViewInterCircos(object = mt, font = 2, cellColor = cell_color, lrColor = c("#F16B6F", "#84B1ED"),
arr.type = "big.arrow",arr.length = 0.04,
trackhight1 = 0.05, slot="expr_l_r_log2_scale",linkcolor.from.sender = TRUE,
linkcolor = NULL, gap.degree = 2,order.vector=c('ST', "SSC", "SPGing", "SPGed"),
trackhight2 = 0.032, track.margin2 = c(0.01,0.12), DIY = FALSE)
ViewInterCircos(object = mt@data$expr_l_r_log2_scale, font = 2, cellColor = cell_color,
lrColor = c("#F16B6F", "#84B1ED"),
arr.type = "big.arrow",arr.length = 0.04,
trackhight1 = 0.05, slot="expr_l_r_log2_scale",linkcolor.from.sender = TRUE,
linkcolor = NULL, gap.degree = 2,order.vector=c('ST', "SSC", "SPGing", "SPGed"),
trackhight2 = 0.032, track.margin2 = c(0.01,0.12), DIY = T)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
?rand_color
?desc
#### pheatmap图
pheatmap(mt@data$expr_l_r_log2_scale,show_rownames = T,show_colnames = T,
treeheight_row=0, treeheight_col=10,
cluster_rows = T,cluster_cols = F,fontsize = 12,angle_col = "45",
# color = colorRampPalette(colors = c('#FFFFFF','#ffffb2','#fd8d3c','#e31a1c'))(1000),
main="score")
#### pheatmap图
library(pheatmap)
pheatmap(mt@data$expr_l_r_log2_scale,show_rownames = T,show_colnames = T,
treeheight_row=0, treeheight_col=10,
cluster_rows = T,cluster_cols = F,fontsize = 12,angle_col = "45",
# color = colorRampPalette(colors = c('#FFFFFF','#ffffb2','#fd8d3c','#e31a1c'))(1000),
main="score")
?pheatmap
library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
use_package(package = "pheatmap", type = "Imports", min_version = TRUE)
?viewPheatmap
#### pheatmap图
viewPheatmap(object = mt, slot="expr_l_r_log2_scale", show_rownames = T,show_colnames = T,
treeheight_row=0, treeheight_col=10,
cluster_rows = T,cluster_cols = F,fontsize = 12,angle_col = "45",
# color = colorRampPalette(colors = c('#FFFFFF','#ffffb2','#fd8d3c','#e31a1c'))(1000),
main="score")
mt@Org
?order
?data.frame
?matrix
mt <- LR2TF(object = mt, sender_cell="ST", recevier_cell="SSC",
slot="expr_l_r_log2_scale")
library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
#### sankey图
mt <- LR2TF(object = mt, sender_cell="ST", recevier_cell="SSC",
slot="expr_l_r_log2_scale")
#### sankey图
mt <- LR2TF(object = mt, sender_cell="ST", recevier_cell="SSC",
slot="expr_l_r_log2_scale")
dim(mt@reductions)
mt@reductions
dim(mt@reductions$sankey)
head(mt@reductions$sankey)
head(mt@reductions$sankey)
networkD3?sankeyNetwork
?sankeyNetwork
library(networkD3)
?sankeyNetwork\
?sankeyNetwork
?aggregate
library(RColorBrewer)
?colorRampPalette
grDevices::colorRampPalette()
?grDevices::colorRampPalette()
?RColorBrewer::brewer.pal()
?sample
?merge
?rbind
?sankeyNetwork
?networkD3::sankeyNetwork()
?networkD3::JS()
?jsonlite
?jsonlite::toJSON()
library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
#### sankey图
## 第一种
mt <- LR2TF(object = mt, sender_cell="ST", recevier_cell="SSC",
slot="expr_l_r_log2_scale")
head(mt@reductions$sankey)
dim(mt@reductions$sankey)
sank <- LRT.Dimplot(mt, fontSize = 8, nodeWidth = 30, height = NULL, width = 1200, sinksRight=FALSE, DIY.color = FALSE)
sank
saveNetwork(sank, "C:/Users/dell/Desktop//ST-SSC_full.html")
tmp <- mt@reductions$sankey
tmp1 <- filter(tmp, weight1>=0.8)
sank <- LRT.Dimplot(tmp1, fontSize = 8, nodeWidth = 30, height = NULL, width = 1200, sinksRight=FALSE, DIY.color = FALSE)
saveNetwork(sank, "D:/InterCell/data_paper/intercellData_SVDPred/SSC_normal_combined_OA/Sankey/ST-SSC_0.8.html")
# 自定义的dataframe输入
tmp <- mt@reductions$sankey
head(tmp)
tmp1 <- filter(tmp, weight1>=0.8)
tmp1 <- dplyr::filter(tmp, weight1>=0.8)
sank <- LRT.Dimplot(tmp1, fontSize = 8, nodeWidth = 30, height = NULL, width = 1200, sinksRight=FALSE, DIY.color = FALSE)
saveNetwork(sank, "D:/InterCell/data_paper/intercellData_SVDPred/SSC_normal_combined_OA/Sankey/ST-SSC_0.8.html")
sank
tmp <- mt@reductions$sankey
tmp1 <- dplyr::filter(tmp, weight1>=0.5)
sank <- LRT.Dimplot(tmp1, fontSize = 8, nodeWidth = 30, height = NULL, width = 1200, sinksRight=FALSE, DIY.color = FALSE)
sank
head(tmp1)
library(devtools)
library(roxygen2)
document() # 自动生成更新rd和namespace(规定了那些包导入，那些函数可被调用)
### 第二种
tmp <- mt@reductions$sankey
tmp.df <- trans2tripleScore(tmp)  ## 格式转换，算出每个L-R-TF的占比score
head(tmp.df)
head(tmp)
mycol.vector = c('#5d62b5','#29c3be','#f2726f','#62b58f','#bc95df', '#67cdf2', '#ffc533', '#5d62b5', '#29c3be')
elments.num <-  tmp.df %>% unlist %>% unique %>% length()
mycol.vector.list <- rep(mycol.vector, times=ceiling(elments.num/length(mycol.vector)))
mycol.vector.list
?LRT.Dimplot
?geom_text
